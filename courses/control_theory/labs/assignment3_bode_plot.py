# -*- coding: utf-8 -*-
"""Assignment3_Smirnova_G6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fxF1TwpMsS8MofEIi-2d9u-20pOvA9MW

# Task 1
**Build Bode plot for a random system.**

**1. Bode plot for a random system**
"""

import numpy as np
from numpy import log10
from scipy import linalg
from scipy import signal
from numpy.linalg import eig
import matplotlib.pyplot as plt

n = 3
A = np.random.randn(n, n) - np.eye(n)*0.5
B = np.zeros((n, 1)); B[0, 0] = 1        
C = np.zeros((1, n)); C[0,-1] = 1        
D = 0

print(A)
print(B)
print(C)
print(D)

d1, d2 = signal.ss2tf(A,B,C,D)
print("d1:", d1)     # numerator(s)
print("d2:", d2)     # denomitator

# remove small high order terms 
while abs(d1[0, 0]) < 0.001:    
    d1 = d1[:,1:]
print("d1 trimmed:", d1)

# find frequency response 
Count = 200
w = np.logspace(-2, 2, num = Count) 
w, H = signal.freqresp((d1, d2), w)

# find parameters for Bode plot
w, mag, phase = signal.bode((d1, d2), w)

# show results
plt.plot(w, mag, "b")
plt.xscale('log')
plt.title('Amplitude vs frequency')
plt.show()

plt.plot(w, phase, "r")
plt.xscale('log')
plt.title('Phase vs frequency')
plt.show()

"""# Task 2
**Replace poles to make it stable and build Bode plot for the new system.**

To make the system stable we make the poles to have negative real parts.
"""

# desirable poles 
P_desired = np.array([-0.1, -0.2, -0.5]) #negative real parts
print(P_desired)

# find K such that eigenvalues(A - B*K) = poles
fsf = signal.place_poles(A, B, P_desired, method='YT')

print("Gain matrix:", fsf.gain_matrix) # matrix K
print("")

BK = np.dot(B, fsf.gain_matrix)
print(BK)
A_star = np.subtract(A, BK)
print(A_star)
DK = np.dot(D, fsf.gain_matrix)
C_star = np.subtract(C, DK)
d1_new, d2_new = signal.ss2tf(A_star,B,C_star,D) 
print("d1:", d1_new)     # numerator(s)
print("d2:", d2_new)     # denomitator

# remove small high order terms 
while abs(d1_new[0, 0]) < 0.001:    
    d1_new = d1_new[:,1:]

# find frequency response 
Count = 200
w_new = np.logspace(-2, 2, num = Count) 
w_new, H_new = signal.freqresp((d1_new, d2_new), w_new)

# find parameters for Bode plot
w_new, mag_new, phase_new = signal.bode((d1_new, d2_new), w_new)

# show results
plt.plot(w_new, mag_new, "b")
plt.xscale('log')
plt.title('Amplitude vs frequency')
plt.show()

plt.plot(w_new, phase_new, "r")
plt.xscale('log')
plt.title('Phase vs frequency')
plt.show()

"""# Task 3
**Prove stability with Nyquist (or Mikhailov) technique.**

After drawing the Nyquist plot, we can find the stability of the closed loop control system using the Nyquist stability criterion. If the critical point (-1+j0) lies outside the encirclement, then the closed loop control system is absolutely stable.
"""

# visualize
plt.plot(H_new.real, H_new.imag, "b")   # positive frequencies
plt.plot(H_new.real,-H_new.imag, "r")   # negative frequencies
plt.show()

e,v = eig(A_star)
if (max(np.real(e)) < 0):
  print("yay, it's stable")
else:
  print("nope, it's not stable")