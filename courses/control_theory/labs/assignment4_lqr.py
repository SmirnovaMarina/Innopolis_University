# -*- coding: utf-8 -*-
"""Assignment4_Smirnova_G6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kebKd758O9jyF8lDvsc-Wsde5bnGh0py

***Task***

Write LQR for a time-variant system.
"""

import numpy as np
from numpy.linalg import eig, pinv, matrix_rank
from scipy import linalg
from scipy.integrate import odeint
import matplotlib.pyplot as plt
import math

n = 3 # state matrix size
m = 2 # size of control signal

# system
B = np.zeros((n, m)); B[0, 0] = 1; B[1, 1] = 1

# weights
Q = np.eye(n)
R = np.eye(m)

# define A(t)
def calculate_A(t):
    A = np.array([[math.sin(t), 0, -3], [1, 0, math.cos(t)], [1, 2, -4]])
    return(A)

def calculate_K(A):
  # solution
  P = linalg.solve_continuous_are(A, B, Q, R)  # the same as S in lecture 6 slides
  # gain matrix
  K = pinv(R).dot(B.transpose().dot(P))
  return(K)

def LTV(x, t):
  A = calculate_A(t)
  return A.dot(x)

def LTV_LQR(x, t):
  # stabilizes system
  A = calculate_A(t)
  K = calculate_K(A)
  A_star = A - B.dot(K)
  return A_star.dot(x)

time = np.linspace(0, 10, 1000) # time range
x0 = np.random.rand(n) # initial state

solution = {"LTV_LQR": odeint(LTV_LQR, x0, time), "LTV": odeint(LTV, x0, time)}

# without stabilization
plt.subplot("211")
plt.plot(time, solution["LTV"])
plt.xlabel('time')
plt.ylabel('x(t)')
plt.title("LTV")

# with stabilization
plt.subplot("212")
plt.plot(time, solution["LTV_LQR"])
plt.xlabel('time')
plt.ylabel('x(t)')
plt.title("LTV with LQR")
plt.subplots_adjust(hspace=0.7)
plt.show()