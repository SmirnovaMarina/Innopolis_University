# -*- coding: utf-8 -*-
"""Lab9_Smirnova_G6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Yycvh0v57kUl5QnhTD2oF6EzqUs_VCy3

***Task 1***

Simulate a function a*sin(t) + b*cos(t)
"""

import matplotlib.pyplot as plot
import numpy as np
import math

# Get x values of the sine wave
time = np.arange(0, 10, 0.1);

a = 2
b = 1
w = 3
v = 1
funct = np.array([], ndmin=1)

for t in time:
  res = a*math.sin(w*t) + b*math.cos(v*t)
  funct = np.append(funct, [res], axis = 0)

# Plot a sine wave using time and amplitude obtained for the sine wave
plot.plot(time, funct)

# Give a title for the function plot
plot.title('function')

plot.xlabel('Time')
plot.ylabel('Amplitude = funct(time)')

plot.axhline(y=0, color='k')
plot.grid(True, which='both')

# Display the function
plot.show()

"""***Task 2***

Add noise by (funct + random value(0,1)) = funct_noise
"""

funct_noise = np.sin(time) + np.random.randn(100)
plot.plot(time, funct_noise)

plot.xlabel('Time')
plot.ylabel('Amplitude = funct(time) with noise')

"""***Task 3***

1. Plot FFT for the plot with noise
2. Shift the graph
"""

funct_fft = np.fft.fft(funct_noise)

funct_fft_shift = np.fft.fftshift(funct_fft)

plot.plot(time, funct_fft)
plot.show()
plot.xlabel('Time')
plot.ylabel('FFT')

plot.plot(time, funct_fft_shift)
plot.xlabel('Time')
plot.ylabel('Shifted FFT')

"""***Task 4***

Add filter to the plot with noise. Plot filtered and inversed graph VS initial graph without noise.
"""

from scipy import fftpack

sig_fft = fftpack.fft(funct)
power = np.abs(sig_fft)
high_freq_fft = sig_fft.copy()
pos_mask = np.where(sin_fft_shift > 0)
freqs = funct_fft_shift[pos_mask]
peak_freq = freqs[power[pos_mask].argmax()]
high_freq_fft[np.abs(funct_fft_shift) > peak_freq] = 0
filtered_sig = fftpack.ifft(high_freq_fft)

plot.figure(figsize=(6, 5))
plot.plot(time, funct, label='Original signal')
plot.plot(time, filtered_sig, linewidth=3, label='Filtered signal')
plot.xlabel('Time [s]')
plot.ylabel('Amplitude')